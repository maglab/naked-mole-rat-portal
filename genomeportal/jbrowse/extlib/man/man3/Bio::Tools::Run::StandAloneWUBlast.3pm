.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::StandAloneWUBlast 3"
.TH Bio::Tools::Run::StandAloneWUBlast 3 "2014-05-21" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::StandAloneWUBlast \- Object for the local execution 
of WU\-Blast.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Do not use directly; use Bio::Tools::Run::StandAloneBlast
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Bio::Tools::Run::StandAloneBlast
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via 
the web:
.PP
.Vb 1
\&  https://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Peter Schattner"
.IX Header "AUTHOR - Peter Schattner"
Email schattner at alum.mit.edu
.SH "MAINTAINER \- Torsten Seemann"
.IX Header "MAINTAINER - Torsten Seemann"
Email torsten at infotech.monash.edu.au
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala  bix@sendu.me.uk (reimplementation)
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Run::StandAloneBlast\->new();
\& Function: Builds a newBio::Tools::Run::StandAloneBlast object 
\& Returns : Bio::Tools::Run::StandAloneBlast
\& Args    : \-quiet => boolean # make program execution quiet
\&           \-_READMETHOD => \*(AqBLAST\*(Aq (default, synonym \*(AqSearchIO\*(Aq) || \*(Aqblast_pull\*(Aq
\&                           # the parsing method, case insensitive
.Ve
.PP
Essentially all \s-1BLAST\s0 parameters can be set via StandAloneBlast.pm.
Some of the most commonly used parameters are listed below. All
parameters have defaults and are optional except for \-p.
.PP
.Vb 8
\&  \-p Program Name [String] 
\&        Input should be one of "wublastp", "wublastn", "wublastx", 
\&        "wutblastn", or "wutblastx".
\&  \-d  Database [String] default = nr
\&        The database specified must first be formatted with xdformat.
\&  \-E  Expectation value (E) [Real] default = 10.0
\&  \-o  BLAST report Output File [File Out]  Optional,
\&            default = ./blastreport.out ; set by StandAloneBlast.pm
.Ve
.SS "wublast"
.IX Subsection "wublast"
.Vb 10
\& Title   : wublast
\& Usage   :  $blast_report = $factory\->wublast(\*(Aqt/testquery.fa\*(Aq);
\&        or
\&               $input = Bio::Seq\->new(\-id=>"test query",
\&                                      \-seq=>"ACTACCCTTTAAATCAGTGGGGG");
\&               $blast_report = $factory\->wublast($input);
\&        or 
\&              $seq_array_ref = \e@seq_array;  # where @seq_array is an array of Bio::Seq objects
\&              $blast_report = $factory\->wublast(\e@seq_array);
\& Returns :  Reference to a Blast object 
\& Args    : Name of a file or Bio::Seq object or an array of 
\&           Bio::Seq object containing the query sequence(s). 
\&           Throws an exception if argument is not either a string 
\&           (eg a filename) or a reference to a Bio::Seq object 
\&           (or to an array of Seq objects).  If argument is string, 
\&           throws exception if file corresponding to string name can 
\&           not be found.
.Ve
.SS "_generic_local_wublast"
.IX Subsection "_generic_local_wublast"
.Vb 4
\& Title   : _generic_local_wublast
\& Usage   :  internal function not called directly
\& Returns :  Blast object
\& Args    :   Reference to calling object and name of BLAST executable
.Ve
.SS "_runwublast"
.IX Subsection "_runwublast"
.Vb 7
\& Title   :  _runwublast
\& Usage   :  Internal function, not to be called directly        
\& Function:   makes actual system call to WU\-Blast program
\& Example :
\& Returns : Report Blast object
\& Args    : Reference to calling object, name of BLAST executable, 
\&           and parameter string for executable
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 6
\& Title   : _setparams
\& Usage   : Internal function, not to be called directly 
\& Function: Create parameter inputs for Blast program
\& Example :
\& Returns : parameter string to be passed to Blast 
\& Args    : Reference to calling object and name of BLAST executable
.Ve
