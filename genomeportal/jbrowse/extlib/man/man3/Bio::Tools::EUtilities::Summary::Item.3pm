.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::EUtilities::Summary::Item 3"
.TH Bio::Tools::EUtilities::Summary::Item 3 "2014-05-21" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::EUtilities::Summary::Item \- simple layered object for DocSum item data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Items can be nested up to three levels at this time. These levels can be
\&  # accessed via Item, ListItem, or StructureItem methods:
\&
\&  while (my $item = $docsum\->next_Item) {
\&     print "Name: ",$item\->get_name,"\en";
\&     print "Data: ",$item\->get_content,"\en";
\&     print "Type: ",$item\->get_type,"\en";
\&     while (my $ls = $item\->next_ListItem) {
\&        # do same here
\&        while (my $struct = $ls\->next_StructureItem) {
\&           # do more stuff here
\&        }
\&     }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DocSum data, as returned from esummary, normally is a simple list of
item\-content\-content_type groups. However, items can also contain nested data to
represent more complex data (such as structural data). Up to three nested layers
may appear in any document summary.
.PP
This class contains methods to access data that can appear in a docsum for any
individual item as well as describes methods to traverse the hierarchy of items
present in a document summary.
.PP
The unique name for items are accessed via \fIget_name()\fR, the content by
\&\fIget_content()\fR (if present), and the data type by \fIget_type()\fR. Items can have
ListItems (Item objects with a \fIdatatype()\fR 'list'), which in turn can have
StructureItems (Item objects with a datatype of 'structure'). Items are
initially traversed via a DocSum object using \fInext_Item()\fR or obtained all at
once with \fIget_Items()\fR. Similarly, nested Items can be accessed by using
next_ListItem/get_ListItems and next_StructureItem/get_StructureItem.  A
flattened list of items can be accessed with \fIget_all_Items()\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@lists.open\-bio.org               \- General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  https://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR Chris Fields"
.IX Header "AUTHOR Chris Fields"
Email cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title    : new
\& Usage    : 
\& Function : 
\& Returns  : 
\& Args     :
.Ve
.SS "get_ids"
.IX Subsection "get_ids"
.Vb 8
\& Title    : get_ids
\& Usage    : my ($id) = $item\->get_ids;
\& Function : returns array or array ref with id
\& Returns  : array or array ref
\& Args     : none
\& Note     : the behavior of this method is to remain consistent with other 
\&            implementations of get_ids(). To retrieve the single DocSum ID use
\&            get_id()
.Ve
.SS "get_id"
.IX Subsection "get_id"
.Vb 5
\& Title    : get_id
\& Usage    : my ($id) = $item\->get_id;
\& Function : returns UID of record
\& Returns  : integer
\& Args     : none
.Ve
.SS "next_ListItem"
.IX Subsection "next_ListItem"
.Vb 5
\& Title    : next_ListItem
\& Usage    : while (my $ls = $item\->next_ListItem) {...}
\& Function : iterates through ListItems (nested layer of Item)
\& Returns  : single ListItem
\& Args     : none
.Ve
.SS "get_ListItems"
.IX Subsection "get_ListItems"
.Vb 5
\& Title    : get_ListItems
\& Usage    : my @ls = $item\->get_ListItems
\& Function : returns list of, well, List Items
\& Returns  : array of List Items
\& Args     : none
.Ve
.SS "next_StructureItem"
.IX Subsection "next_StructureItem"
.Vb 5
\& Title    : next_StructureItem
\& Usage    : while (my $struc = $ls\->next_StructureItem) {...}
\& Function : iterates through StructureItems (nested layer of ListItem)
\& Returns  : single StructureItems
\& Args     : none
.Ve
.SS "get_StructureItems"
.IX Subsection "get_StructureItems"
.Vb 5
\& Title    : get_StructureItems
\& Usage    : my @structs = $ls\->get_StructureItems
\& Function : returns list of Structure Items
\& Returns  : array of StructureItems
\& Args     : none
.Ve
.SS "next_subItem"
.IX Subsection "next_subItem"
.Vb 7
\& Title    : next_subItem
\& Usage    : while (my $it = $ls\->next_subItem) {...}
\& Function : iterates through the next layer of Items
\& Returns  : single Item
\& Args     : none
\& Notes    : unlike next_ListItem and next_StructureItem, this generically
\&            accesses any sub Items (useful for recursive calls, for example)
.Ve
.SS "get_subItems"
.IX Subsection "get_subItems"
.Vb 7
\& Title    : get_subItems
\& Usage    : my @items = $ls\->get_subItems
\& Function : returns list of sub Items
\& Returns  : array of Items
\& Args     : none
\& Notes    : unlike get_ListItems and get_StructureItems, this generically
\&            accesses any sub Items (useful for recursive calls, for example)
.Ve
.SS "get_name"
.IX Subsection "get_name"
.Vb 5
\& Title    : get_name
\& Usage    : my $nm = $ls\->get_name
\& Function : retrieves Item/ListItem/StructureItem name for this Item
\& Returns  : string
\& Args     : none
.Ve
.SS "get_type"
.IX Subsection "get_type"
.Vb 7
\& Title    : get_type
\& Usage    : my $type = $ls\->get_type
\& Function : retrieves Item/ListItem/StructureItem type 
\& Returns  : string
\& Args     : none
\& Note     : this is not the same as the datatype(), which describes the
\&            group this Item object belongs to
.Ve
.SS "get_content"
.IX Subsection "get_content"
.Vb 5
\& Title    : get_content
\& Usage    : my $data = $ls\->get_content
\& Function : retrieves Item/ListItem/StructureItem content (if any)
\& Returns  : string
\& Args     : none
.Ve
.SS "rewind"
.IX Subsection "rewind"
.Vb 7
\& Title    : rewind
\& Usage    : $item\->rewind()
\& Function : rewinds iterators
\& Returns  : none
\& Args     : [optional] No arg \- only rewinds current layer
\&           \*(Aqall\*(Aq \- rewind all DocSum object layers
\&                (Items, ListItems, StructureItems)
.Ve
.SH "ItemContainerI methods"
.IX Header "ItemContainerI methods"
.SS "next_Item"
.IX Subsection "next_Item"
.Vb 7
\& Title    : next_Item
\& Usage    : while (my $item = $docsum\->next_Item) {...}
\& Function : iterates through Items (nested layer of Item)
\& Returns  : single Item
\& Args     : [optional] single arg (string)
\&            \*(Aqflatten\*(Aq \- iterates through a flattened list ala
\&                          get_all_DocSum_Items()
.Ve
.SS "get_Items"
.IX Subsection "get_Items"
.Vb 5
\& Title    : get_Items
\& Usage    : my @items = $docsum\->get_Items
\& Function : returns list of, well, Items
\& Returns  : array of Items
\& Args     : none
.Ve
.SS "get_all_Items"
.IX Subsection "get_all_Items"
.Vb 8
\& Title    : get_all_Items
\& Usage    : my @items = $docsum\->get_all_Items
\& Function : returns flattened list of all Item objects (Items, ListItems,
\&            StructureItems)
\& Returns  : array of Items
\& Args     : none
\& Note     : items are added top\-down (similar order to using nested calls)
\&            in original list order.
\&
\&             1         2        7        8
\&           Item  \-   Item  \-  Item  \-  Item ...
\&                     |
\&                    | 3        6
\&                 ListItem \- ListItem
\&                   |
\&                  | 4          5
\&               Structure \- Structure
.Ve
.SS "get_all_names"
.IX Subsection "get_all_names"
.Vb 5
\& Title    : get_all_names
\& Usage    : my @names = get_all_names()
\& Function : Returns an array of names for all Item(s) in DocSum.
\& Returns  : array of unique strings
\& Args     : none
.Ve
.SS "get_Items_by_name"
.IX Subsection "get_Items_by_name"
.Vb 5
\& Title    : get_Items_by_name
\& Usage    : my @items = get_Items_by_name(\*(AqCreateDate\*(Aq)
\& Function : Returns named Item(s) in DocSum (indicated by passed argument)
\& Returns  : array of Item objects
\& Args     : string (Item name)
.Ve
.SS "get_contents_by_name"
.IX Subsection "get_contents_by_name"
.Vb 6
\& Title    : get_contents_by_name
\& Usage    : my ($data) = get_contents_by_name(\*(AqCreateDate\*(Aq)
\& Function : Returns content for named Item(s) in DocSum (indicated by
\&            passed argument)
\& Returns  : array of values (type varies per Item)
\& Args     : string (Item name)
.Ve
.SS "get_type_by_name"
.IX Subsection "get_type_by_name"
.Vb 6
\& Title    : get_type_by_name
\& Usage    : my $data = get_type_by_name(\*(AqCreateDate\*(Aq)
\& Function : Returns data type for named Item in DocSum (indicated by
\&            passed argument)
\& Returns  : scalar value (string) if present
\& Args     : string (Item name)
.Ve
.SS "to_string"
.IX Subsection "to_string"
.Vb 7
\& Title    : to_string
\& Usage    : $foo\->to_string()
\& Function : converts current object to string
\& Returns  : none
\& Args     : (optional) simple data for text formatting.  This implementation
\&            passes an argument for layering Items/subItems
\& Note     : Used generically for debugging and print_DocSums methods
.Ve
