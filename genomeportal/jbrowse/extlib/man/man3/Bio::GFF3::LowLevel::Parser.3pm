.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::GFF3::LowLevel::Parser 3"
.TH Bio::GFF3::LowLevel::Parser 3 "2014-02-28" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::GFF3::LowLevel::Parser \- a fast, low\-level gff3 parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $p = Bio::GFF3::LowLevel::Parser\->open( $file_or_fh );
\&
\&  while( my $i = $p\->next_item ) {
\&
\&      if( ref $i eq \*(AqARRAY\*(Aq ) {
\&          ## $i is an arrayref of feature lines that have the same ID,
\&          ## in the same format as returned by
\&          ## Bio::GFF3::LowLevel::gff3_parse_feature
\&          for my $f (@$i) {
\&             # for each location of this feature
\&             # do something with it
\&          }
\&      }
\&      elsif( $i\->{directive} ) {
\&          if( $i\->{directive} eq \*(AqFASTA\*(Aq ) {
\&              my $fasta_filehandle = $i\->{filehandle};
\&              ## parse the FASTA in the filehandle with BioPerl or
\&              ## however you want.  or ignore it.
\&          }
\&          elsif( $i\->{directive} eq \*(Aqgff\-version\*(Aq ) {
\&              print "it says it is GFF version $i\->{value}\en";
\&          }
\&          elsif( $i\->{directive} eq \*(Aqsequence\-region\*(Aq ) {
\&              print( "found a sequence\-region, sequence $i\->{seq_id},",
\&                     " from $i\->{start} to $i\->{end}\en"
\&                   );
\&          }
\&      }
\&      elsif( $i\->{comment} ) {
\&          ## this is a comment in your GFF3 file, in case you want to do
\&          ## something with it.
\&          print "that comment said: \*(Aq$i\->{comment}\*(Aq\en";
\&      }
\&      else {
\&          die \*(Aqthis should never happen!\*(Aq;
\&      }
\&
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a fast, low-level parser for Generic Feature Format, version 3
(\s-1GFF3\s0).  It is a low-level parser, it only returns dumb hashrefs.  It
\&\fBdoes\fR reconstruct feature hierarchies, however, using features'
\&\f(CW\*(C`ID\*(C'\fR, \f(CW\*(C`Parent\*(C'\fR, and \f(CW\*(C`Derives_from\*(C'\fR attributes, and it \fBdoes\fR group
together lines with the same \s-1ID\s0 (i.e. features that have multiple
locations).
.PP
\fIFeatures\fR
.IX Subsection "Features"
.PP
Features are returned as arrayrefs containing one or more (never zero)
feature lines parsed in the same format as
\&\*(L"gff3_parse_feature\*(R" in Bio::GFF3::LowLevel.  Each has some additional
keys for related features: \f(CW\*(C`child_features\*(C'\fR and \f(CW\*(C`derived_features\*(C'\fR,
each of which is a (possibly empty) arrayref of features
(i.e. arrayrefs) that refer to this one as a \f(CW\*(C`Parent\*(C'\fR or claim that
they \f(CW\*(C`Derives_from\*(C'\fR it.
.PP
Note that, to make code that uses this parser easier to write, \fBall\fR
features have \f(CW\*(C`child_features\*(C'\fR and \f(CW\*(C`derived_features\*(C'\fR arrayrefs.
This means you don't have to check for the existence of these before
seeing if they have anything in them.
.PP
\fIDirectives\fR
.IX Subsection "Directives"
.PP
Directives are returned as hashrefs, in the same format as
\&\*(L"gff3_parse_directive\*(R" in Bio::GFF3::LowLevel.
.PP
\fIComments\fR
.IX Subsection "Comments"
.PP
Comments are parsed into a hashref of the form:
.PP
.Vb 1
\&  { comment => \*(Aqtext of the comment, not including the hash mark(s) and ending newline\*(Aq }
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "open( $file_or_filehandle, ... )"
.el .SS "open( \f(CW$file_or_filehandle\fP, ... )"
.IX Subsection "open( $file_or_filehandle, ... )"
Make a new parser object that will parse the \s-1GFF3\s0 from all of the files
or filehandles that you give it, as if they were all a single stream.
.ie n .SS "max_lookback( $features )"
.el .SS "max_lookback( \f(CW$features\fP )"
.IX Subsection "max_lookback( $features )"
Set a maximum number of features the parser will keep buffered in case
there are features later in the file referring to it.  By default,
there is no limit, with the parser instead relying on the presence of
\&'###' marks in the \s-1GFF3\s0 file.
.SS "new"
.IX Subsection "new"
Returns a wrapped copy of this parser that returns data that is backward-compatible with what the 1.0 version of this parser returned.  Do not use in new code.
.SS "\fInext_item()\fP"
.IX Subsection "next_item()"
Iterate through all of the items (features, directives, and comments)
in the file(s) given to the parser.  Features are arrayrefs of
hashrefs, and directives and comments are hashrefs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Buels <rmb32@cornell.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Robert Buels.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
