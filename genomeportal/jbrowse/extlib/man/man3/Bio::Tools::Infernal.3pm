.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Infernal 3"
.TH Bio::Tools::Infernal 3 "2014-05-21" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Infernal \- A parser for Infernal output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&  use Bio::Tools::Infernal;
\&  my $parser = Bio::Tools::Infernal\->new(\-file => $rna_output,
\&                                        \-motiftag => \*(Aqmisc_binding\*(Aq
\&                                        \-desctag => \*(AqLysine riboswitch\*(Aq,
\&                                        \-cm    => \*(AqRF00168\*(Aq,
\&                                        \-rfam  =>  \*(AqRF00168\*(Aq,
\&                                        \-minscore => 20);
\&  #parse the results, get a Bio::SeqFeature::FeaturePair
\&  while( my $motif = $parser\->next_prediction) {
\&    # do something here
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a highly experimental parser for Infernal output from the cmsearch
program.  At some point it is anticipated that this will morph into a proper
SearchIO parser, along with the related RNAMotif and \s-1ERPIN\s0 tools.
.PP
The Infernal suite of programs are used for generating \s-1RNA\s0 \s-1CM\s0 (covariance
models) and searching sequences using CMs to locate potentially similar
structures.  The program is under active development; it is anticiapted that
this will support the latest version available.
.PP
This parser has been tested and is capable of parsing Infernal 0.7 and 0.71
output.  However, future Infernal versions may break parsing as the output is
constantly evolving, so keep an eye on this space for additional notes.
.PP
Currently data is parsed into a Bio::SeqFeature::FeaturePair object, consisting
of a query (the covariance model) and the hit (sequence searched).
.PP
Model data is accessible via the following:
.PP
.Vb 10
\&  Data            SeqFeature::FeaturePair         Note
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  primary tag     $sf\->primary_tag                Rfam ID (if passed to new())
\&  start           $sf\->start                      Based on CM length
\&  end             $sf\->end                        Based on CM length
\&  score           $sf\->score                      Bit score
\&  strand          $sf\->strand                     0 (CM does not have a strand)
\&  seqid           $sf\->seq_id                     Rfam ID (if passed to new())
\&  display name    $sf\->feature1\->display_name     CM name (if passed to new())
\&  source          $sf\->feature1\->source tag      \*(AqInfernal\*(Aq followed by version
.Ve
.PP
Hit data is accessible via the following:
.PP
.Vb 9
\&  Data            SeqFeature::FeaturePair         Note
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  start           $sf\->hstart
\&  end             $sf\->hend
\&  score(bits)     $sf\->hscore
\&  strand          $sf\->hstrand
\&  seqid           $sf\->hseqid
\&  Primary Tag     $sf\->hprimary_tag
\&  Source Tag      $sf\->hsource_tag
.Ve
.PP
Added FeaturePair tags are :
.PP
.Vb 9
\&   secstructure \- entire description line (in case the regex used for
\&                  sequence ID doesn\*(Aqt adequately catch the name
\&   model        \- name of the descriptor file (may include path to file)
\&   midline      \- contains structural information from the descriptor
\&                  used as a query
\&   hit          \- sequence of motif, separated by spaces according to
\&                  matches to the structure in the descriptor (in
\&                  SecStructure).
\&   seqname      \- raw sequence name (for downstream parsing if needed)
.Ve
.PP
An additional parameter ('minscore') is added due to the huge number
of spurious hits generated by cmsearch.  This screens data, only building
and returning objects when a minimal bitscore is present.
.PP
See t/rnamotif.t for example usage.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Chris Fields"
.IX Header "AUTHOR - Chris Fields"
Email cjfields-at-uiuc-dot-edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Infernal\->new();
\& Function: Builds a new Bio::Tools::Infernal object 
\& Returns : an instance of Bio::Tools::Infernal
\& Args    : \-fh/\-file  \- for input filehandle/filename
\&           \-motiftag  \- primary tag used in gene features (default \*(Aqmisc_binding\*(Aq)
\&           \-desctag   \- tag used for display_name name (default \*(Aqinfernal\*(Aq)
\&           \-srctag    \- source tag used in all features (default \*(AqInfernal\*(Aq)
\&           \-rfam      \- Rfam id number
\&           \-cm        \- covariance model used in analysis (may be same as rfam #)
\&           \-minscore  \- minimum score (simple screener, since Infernal generates
\&                        a ton of spurious hits)
\&           \-version   \- Infernal program version
.Ve
.SS "motif_tag"
.IX Subsection "motif_tag"
.Vb 10
\& Title   : motif_tag
\& Usage   : $obj\->motif_tag($newval)
\& Function: Get/Set the value used for \*(Aqmotif_tag\*(Aq, which is used for setting the
\&           primary_tag.
\&           Default is \*(Aqmisc_binding\*(Aq as set by the global $MotifTag.
\&           \*(Aqmisc_binding\*(Aq is used here because a conserved RNA motif is capable
\&           of binding proteins (regulatory proteins), antisense RNA (siRNA),
\&           small molecules (riboswitches), or nothing at all (tRNA,
\&           terminators, etc.).  It is recommended that this be changed to other
\&           tags (\*(Aqmisc_RNA\*(Aq, \*(Aqprotein_binding\*(Aq, \*(AqtRNA\*(Aq, etc.) where appropriate.
\&           For more information, see:
\&           http://www.ncbi.nlm.nih.gov/collab/FT/index.html
\& Returns : value of motif_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "source_tag"
.IX Subsection "source_tag"
.Vb 6
\& Title   : source_tag
\& Usage   : $obj\->source_tag($newval)
\& Function: Get/Set the value used for the \*(Aqsource_tag\*(Aq.
\&           Default is \*(AqInfernal\*(Aq as set by the global $SrcTag
\& Returns : value of source_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "desc_tag"
.IX Subsection "desc_tag"
.Vb 10
\& Title   : desc_tag
\& Usage   : $obj\->desc_tag($newval)
\& Function: Get/Set the value used for the query motif.  This will be placed in
\&           the tag \*(Aq\-display_name\*(Aq.  Default is \*(Aqinfernal\*(Aq as set by the global
\&           $DescTag.  Use this to manually set the descriptor (motif searched for).
\&           Since there is no way for this module to tell what the motif is from the
\&           name of the descriptor file or the Infernal output, this should
\&           be set every time an Infernal object is instantiated for clarity
\& Returns : value of exon_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "covariance_model"
.IX Subsection "covariance_model"
.Vb 5
\& Title   : covariance_model
\& Usage   : $obj\->covariance_model($newval)
\& Function: Get/Set the value used for the covariance model used in the analysis.
\& Returns : value of exon_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "rfam"
.IX Subsection "rfam"
.Vb 5
\& Title   : rfam
\& Usage   : $obj\->rfam($newval)
\& Function: Get/Set the Rfam accession number
\& Returns : value of exon_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "minscore"
.IX Subsection "minscore"
.Vb 5
\& Title   : minscore
\& Usage   : $obj\->minscore($newval)
\& Function: Get/Set the minimum score threshold for generating SeqFeatures
\& Returns : value of exon_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "program_version"
.IX Subsection "program_version"
.Vb 6
\& Title   : program_version
\& Usage   : $obj\->program_version($newval)
\& Function: Get/Set the Infernal program version
\& Returns : value of exon_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
\&           Note: this is set to $DEFAULT_VERSION by, um, default
.Ve
.SS "analysis_method"
.IX Subsection "analysis_method"
.Vb 5
\& Usage     : $obj\->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\&             /Infernal/i.
\& Returns   : String
\& Argument  : n/a
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 12
\& Title   : next_feature
\& Usage   : while($gene = $obj\->next_feature()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the RNAMotif result
\&           file. Call this method repeatedly until FALSE is returned.
\&           The returned object is actually a SeqFeatureI implementing object.
\&           This method is required for classes implementing the
\&           SeqAnalysisParserI interface, and is merely an alias for 
\&           next_prediction() at present.
\& Returns : A Bio::Tools::Prediction::Gene object.
\& Args    : None (at present)
.Ve
.SS "next_prediction"
.IX Subsection "next_prediction"
.Vb 8
\& Title   : next_prediction
\& Usage   : while($gene = $obj\->next_prediction()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the RNAMotif result
\&           file. Call this method repeatedly until FALSE is returned.
\& Returns : A Bio::SeqFeature::Generic object
\& Args    : None (at present)
.Ve
