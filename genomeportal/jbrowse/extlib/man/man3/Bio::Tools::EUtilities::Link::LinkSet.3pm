.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::EUtilities::Link::LinkSet 3"
.TH Bio::Tools::EUtilities::Link::LinkSet 3 "2014-05-21" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::EUtilities::Link::LinkSet \- class for EUtils LinkSets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  # ...
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@lists.open\-bio.org               \- General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  https://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.SS "get_ids"
.IX Subsection "get_ids"
.Vb 10
\& Title    : get_ids
\& Usage    : my @ids = $linkset\->get_ids
\& Function : returns list of retrieved IDs
\& Returns  : array of IDs
\& Args     : none
\& Notes    : Cmd                   Description
\&            acheck                same as get_submitted_ids
\&            lcheck                same as get_submitted_ids
\&            ncheck                same as get_submitted_ids
\&            prlinks               same as get_submitted_ids
\&            llinks                same as get_submitted_ids
\&            llinkslib             same as get_submitted_ids
\&            neighbor              linked IDs for database in get_database
\&            neighbor_history      linked IDs for database in get_database
.Ve
.SS "get_database"
.IX Subsection "get_database"
.Vb 10
\& Title    : get_database
\& Usage    : my $db = $info\->get_database;
\& Function : returns single database name (eutil\-compatible).  This is the
\&            queried database. For elinks (which have \*(Aqdb\*(Aq and \*(Aqdbfrom\*(Aq)
\&            this is equivalent to db/dbto (use get_dbfrom() to for the latter).
\&            Note that this only returns the first db; in some cases this may
\&            not be what you want (when multiple dbs are queried, for instance)
\& Returns  : string
\& Args     : none
\& Notes    : with all elink cmd arguments
.Ve
.SS "get_db (alias for get_database)"
.IX Subsection "get_db (alias for get_database)"
.SS "get_dbto (alias for get_database)"
.IX Subsection "get_dbto (alias for get_database)"
.SS "get_databases"
.IX Subsection "get_databases"
.Vb 6
\& Title    : get_databases
\& Usage    : my $string = $linkset\->get_databases;
\& Function : retrieve databases referred to for this linkset
\&            these may be present as a single database or embedded in 
\& Returns  : array of strings
\& Args     : none
.Ve
.SS "get_dbs (alias for get_databases)"
.IX Subsection "get_dbs (alias for get_databases)"
.SS "get_dbfrom"
.IX Subsection "get_dbfrom"
.Vb 5
\& Title    : get_dbfrom
\& Usage    : my $string = $linkset\->get_dbfrom;
\& Function : retrieve originating database for this linkset
\& Returns  : string
\& Args     : none
.Ve
.SS "get_link_names"
.IX Subsection "get_link_names"
.Vb 9
\& Title    : get_link_names
\& Usage    : my $string = $linkset\->get_link_names;
\& Function : retrieve eutil\-compatible link names
\& Returns  : array of strings
\& Args     : none
\& Notes    : Each LinkSet can hold multiple LinkInfo objects (each containing
\&            a link name). Also, some LinkSets define a single link name. This
\&            returns an array with all unique linknames globbed both sources, if
\&            present and defined
.Ve
.SS "get_link_name"
.IX Subsection "get_link_name"
.Vb 5
\& Title    : get_link_name
\& Usage    : my $string = $linkset\->get_link_name;
\& Function : retrieve eutil\-compatible link name
\& Returns  : single link name
\& Args     : none
.Ve
.SS "get_submitted_ids"
.IX Subsection "get_submitted_ids"
.Vb 5
\& Title    : get_submitted_ids
\& Usage    : my $string = $linkset\->get_submitted_ids;
\& Function : retrieve original ID list
\& Returns  : string
\& Args     : none
.Ve
.SS "has_scores"
.IX Subsection "has_scores"
.Vb 5
\& Title    : has_scores
\& Usage    : if (my $linkset\->has_scores) {...}
\& Function : returns TRUE if score data is present 
\& Returns  : Boolean 
\& Args     : none
.Ve
.SS "get_scores"
.IX Subsection "get_scores"
.Vb 5
\& Title    : get_scores
\& Usage    : %scores = $linkset\->get_scores;
\& Function : returns flattened list or hash ref containing ID => score pairs
\& Returns  : hash or hash ref (based on list or scalar context)
\& Args     : none
.Ve
.SS "get_score_by_id"
.IX Subsection "get_score_by_id"
.Vb 5
\& Title    : get_score_by_id
\& Usage    : $score = $linkset\->get_score_by_id($id);
\& Function : returns the score for a particular primary ID
\& Returns  : integer
\& Args     : [REQUIRED] Primary ID for the score lookup
.Ve
.SS "has_linkout"
.IX Subsection "has_linkout"
.Vb 7
\& Title    : has_linkout
\& Usage    : if ($linkset\->has_linkout) {...}
\& Function : returns TRUE if the single ID present in this linkset has a linkout
\& Returns  : boolean
\& Args     : none
\& Notes    : this checks cmd=lcheck (boolean for a linkout) and also backchecks
\&            cmd=acheck for databases with name \*(AqLinkOut\*(Aq
.Ve
.SS "has_neighbor"
.IX Subsection "has_neighbor"
.Vb 8
\& Title    : has_neighbor
\& Usage    : if ($linkset\->has_neighbor) {...}
\& Function : returns TRUE if the single ID present in this linkset has a neighbor
\&            in the same database
\& Returns  : boolean
\& Args     : none
\& Notes    : this checks cmd=ncheck (boolean for a neighbor in same database); no
\&            other checks performed at this time
.Ve
.SS "next_UrlLink"
.IX Subsection "next_UrlLink"
.Vb 5
\& Title    : next_UrlLink
\& Usage    : while (my $url = $linkset\->next_UrlLink) {...}
\& Function : iterate through UrlLink objects
\& Returns  : Bio::Tools::EUtilities::Link::UrlLink
\& Args     :
.Ve
.SS "get_UrlLinks"
.IX Subsection "get_UrlLinks"
.Vb 5
\& Title    : get_UrlLinks
\& Usage    : my @urls = $linkset\->get_UrlLinks
\& Function : returns all UrlLink objects
\& Returns  : list of Bio::Tools::EUtilities::Link::UrlLink
\& Args     :
.Ve
.SS "next_LinkInfo"
.IX Subsection "next_LinkInfo"
.Vb 5
\& Title    : next_LinkInfo
\& Usage    : while (my $info = $linkset\->next_LinkInfo) {...}
\& Function : iterate through LinkInfo objects
\& Returns  : Bio::Tools::EUtilities::Link::LinkInfo
\& Args     :
.Ve
.SS "get_LinkInfo"
.IX Subsection "get_LinkInfo"
.Vb 5
\& Title    : get_LinkInfo
\& Usage    : my @links = $linkset\->get_LinkInfo
\& Function : returns all LinkInfo objects
\& Returns  : list of Bio::Tools::EUtilities::Link::LinkInfo
\& Args     :
.Ve
.SS "rewind"
.IX Subsection "rewind"
.Vb 9
\& Title    : rewind
\& Usage    : $info\->rewind() # rewinds all (default)
\&            $info\->rewind(\*(Aqlinks\*(Aq) # rewinds only links
\& Function : \*(Aqrewinds\*(Aq (resets) specified interators (all if no arg)
\& Returns  : none
\& Args     : [OPTIONAL] String: 
\&            \*(Aqall\*(Aq       \- all iterators (default)
\&            \*(Aqlinkinfo\*(Aq or \*(Aqlinkinfos\*(Aq  \- LinkInfo objects only
\&            \*(Aqurllinks\*(Aq   \- UrlLink objects only
.Ve
.SS "to_string"
.IX Subsection "to_string"
.Vb 6
\& Title    : to_string
\& Usage    : $foo\->to_string()
\& Function : converts current object to string
\& Returns  : none
\& Args     : (optional) simple data for text formatting
\& Note     : Used generally for debugging and for various print methods
.Ve
