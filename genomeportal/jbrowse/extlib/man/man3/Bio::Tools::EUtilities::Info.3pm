.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::EUtilities::Info 3"
.TH Bio::Tools::EUtilities::Info 3 "2014-05-21" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::EUtilities::Info \- interface class for storing einfo data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #### should not create instance directly; Bio::Tools::EUtilities does this ####
\&
\&  my $info = Bio::Tools::EUtilities\->new(\-eutil => \*(Aqeinfo\*(Aq,
\&                                         \-file => \*(Aqeinfo.xml\*(Aq);
\&  # can also use \*(Aq\-response\*(Aq (for HTTP::Response objects) or \*(Aq\-fh\*(Aq (for filehandles)
\&
\&  # print available databases (if data is present)
\&
\&  print join(\*(Aq, \*(Aq,$info\->get_available_databases),"\en";
\&
\&  # get database info
\&
\&  my $db = $info\->get_database; # in case you forgot...
\&  my $desc = $info\->get_description;
\&  my $nm = $info\->get_menu_name;
\&  my $ct = $info\->get_record_count;
\&  my $dt = $info\->get_last_update;
\&
\&  # EUtilDataI interface methods
\&
\&  my $eutil = $info\->eutil;
\&  my $type = $info\->datatype;
\&
\&  # iterate through Field and Link objects
\&
\&  while (my $field = $info\->next_Field) {
\&      print "Field code: ",$field\->get_field_code,"\en";
\&      print "Field name: ",$field\->get_field_name,"\en";
\&      print "Field desc: ",$field\->get_field_description,"\en";
\&      print "DB  : ",$field\->get_database,"\en";
\&      print "Term ct   : ",$field\->get_term_count,"\en";
\&      for my $att (qw(is_date is_singletoken is_hierarchy is_hidden is_numerical)) {
\&          print "\etField $att\en" if $field\->$att;
\&      }
\&  }
\&
\&  my @fields = $info\->get_Fields; # grab them all (useful for grep)
\&
\&  while (my $link = $info\->next_LinkInfo) {
\&      print "Link name: ",$link\->get_link_name,"\en";
\&      print "Link desc: ",$link\->get_link_description,"\en";
\&      print "DBFrom: ",$link\->get_dbfrom,"\en"; # same as get_database()
\&      print "DBTo: ",$link\->get_dbto,"\en"; # database linked to
\&  }
\&
\&  my @links = $info\->get_LinkInfo; # grab them all (useful for grep)
\&
\&  $info\->rewind(); # rewinds all iterators
\&  $info\->rewind(\*(Aqlinks\*(Aq); # rewinds Link iterator
\&  $info\->rewind(\*(Aqfields\*(Aq); # rewinds Field iterator
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class handles data output (\s-1XML\s0) from einfo.
.PP
Einfo is capable of returning two types of information:
.IP "\(bu" 3
A list of all available databases (when called w/o parameters)
.IP "\(bu" 3
Information about a specific database.
.PP
The latter information includes the database description, record count, and
date/time stamp for the last update, among other things. It also includes a list
of fields (indices by which record data is stored which can be used in queries)
and links (crossrefs between related records in other databases at \s-1NCBI\s0). Data
from the latter two are stored in two small subclasses (FieldInfo and LinkInfo)
which can be iterated through or retrieved all at once, as demonstrated above.
\&\s-1NOTE:\s0 Methods described for the LinkInfo and FieldInfo subclasses are unique to
those classes (as they retrieve data unique to those data types).
.PP
Further documentation for Link and Field subclass methods is included below.
.PP
For more information on einfo see:
.PP
.Vb 1
\&   http://eutils.ncbi.nlm.nih.gov/entrez/query/static/einfo_help.html
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl
modules. Send your comments and suggestions preferably to one of the Bioperl
mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@lists.open\-bio.org               \- General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs
and their resolution. Bug reports can be submitted via the web.
.PP
.Vb 1
\&  https://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal
methods are usually preceded with a _
.SS "rewind"
.IX Subsection "rewind"
.Vb 9
\& Title    : rewind
\& Usage    : $info\->rewind() # rewinds all (default)
\&            $info\->rewind(\*(Aqlinks\*(Aq) # rewinds only links
\& Function : \*(Aqrewinds\*(Aq (resets) specified interators (all if no arg)
\& Returns  : none
\& Args     : [OPTIONAL] String: 
\&            \*(Aqall\*(Aq    \- all iterators (default)
\&            \*(Aqlinkinfo\*(Aq  \- LinkInfo objects only
\&            \*(Aqfieldinfo\*(Aq \- FieldInfo objects only
.Ve
.SS "to_string"
.IX Subsection "to_string"
.Vb 6
\& Title    : to_string
\& Usage    : $foo\->to_string()
\& Function : converts current object to string
\& Returns  : none
\& Args     : (optional) simple data for text formatting
\& Note     : Used generally for debugging and for various print methods
.Ve
