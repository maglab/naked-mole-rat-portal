.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::EUtilities::Info::LinkInfo 3"
.TH Bio::Tools::EUtilities::Info::LinkInfo 3 "2014-05-21" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::EUtilities::Info::LinkInfo \- class for storing einfo link data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    ## should not create instance directly; Bio::Tools::EUtilities does this ##
\&
\&    # get a LinkInfo object using Bio:Tools::EUtilities    
\&    print "Link name: ",$link\->get_link_name,"\en";
\&    print "Link name: ",$link\->get_link_menu_name,"\en";
\&    print "Link desc: ",$link\->get_link_description,"\en";
\&    print "DBFrom: ",$link\->get_dbfrom,"\en"; # database linked from
\&    print "DBTo: ",$link\->get_dbto,"\en"; # database linked to
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class handles data output (\s-1XML\s0) from both einfo and elink, and centers on
describing data that either describes how \s-1NCBI\s0 databases are linked together
via link names, or how databases are linked to outside databases (LinkOut).
.PP
Further documentation for Link and Field subclass methods is included below.
.PP
For more information on einfo see:
.PP
.Vb 1
\&   http://eutils.ncbi.nlm.nih.gov/entrez/query/static/einfo_help.html
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl
modules. Send your comments and suggestions preferably to one of the Bioperl
mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@lists.open\-bio.org               \- General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs
and their resolution. Bug reports can be submitted via the web.
.PP
.Vb 1
\&  https://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal
methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title    : new
\& Note     : *** should not be called by end\-users ***  
\& Usage    : my $ct = Bio::Tools::EUtilities::Info::LinkInfo;
\& Function : returns new LinkInfo instance
\& Returns  : Bio::Tools::EUtilities::Info::LinkInfo instance
\& Args     : none (all data added via _add_data, most methods are getters only)
.Ve
.SS "get_database"
.IX Subsection "get_database"
.Vb 7
\& Title    : get_database
\& Usage    : my $db = $info\->get_database;
\& Function : returns single database name (eutil\-compatible).  This is the
\&            queried database. For elinks (which have \*(Aqdb\*(Aq and \*(Aqdbfrom\*(Aq)
\&            this is equivalent to db/dbto (use get_dbfrom() to for the latter)
\& Returns  : string
\& Args     : none
.Ve
.SS "get_db (alias for get_database)"
.IX Subsection "get_db (alias for get_database)"
.SS "get_dbto (alias for get_database)"
.IX Subsection "get_dbto (alias for get_database)"
.SS "get_dbfrom"
.IX Subsection "get_dbfrom"
.Vb 6
\& Title    : get_dbfrom
\& Usage    : my $origdb = $link\->get_dbfrom;
\& Function : returns referring database
\& Returns  : string
\& Args     : none
\& Note     :
.Ve
.SS "get_link_name"
.IX Subsection "get_link_name"
.Vb 5
\& Title    : get_link_name
\& Usage    : $ln = $link\->get_link_name;
\& Function : returns raw link name (eutil\-compatible)
\& Returns  : string
\& Args     : none
.Ve
.SS "get_link_description"
.IX Subsection "get_link_description"
.Vb 5
\& Title    : get_link_description
\& Usage    : $desc = $link\->get_link_description;
\& Function : returns the (more detailed) link description
\& Returns  : string
\& Args     : none
.Ve
.SS "get_link_menu_name"
.IX Subsection "get_link_menu_name"
.Vb 5
\& Title    : get_link_menu_name
\& Usage    : my $mn = $link\->get_link_menu_name;
\& Function : returns formal menu name
\& Returns  : string
\& Args     : none
.Ve
.SS "get_priority"
.IX Subsection "get_priority"
.Vb 6
\& Title    : get_priority
\& Usage    : my $mn = $link\->get_priority;
\& Function : returns priority ranking
\& Returns  : integer
\& Args     : none
\& Note     : only set when using elink and cmd set to \*(Aqacheck\*(Aq
.Ve
.SS "get_html_tag"
.IX Subsection "get_html_tag"
.Vb 6
\& Title    : get_html_tag
\& Usage    : my $tag = $link\->get_html_tag;
\& Function : returns HTML tag
\& Returns  : string
\& Args     : none
\& Note     : only set when using elink and cmd set to \*(Aqacheck\*(Aq
.Ve
.SS "get_url"
.IX Subsection "get_url"
.Vb 7
\& Title    : get_url
\& Usage    : my $url = $link\->get_url;
\& Function : returns URL string; note that the string isn\*(Aqt usable directly but
\&            has the ID replaced with the tag <@UID@>
\& Returns  : string
\& Args     : none
\& Note     : only set when using elink and cmd set to \*(Aqacheck\*(Aq
.Ve
.SS "to_string"
.IX Subsection "to_string"
.Vb 6
\& Title    : to_string
\& Usage    : $foo\->to_string()
\& Function : converts current object to string
\& Returns  : none
\& Args     : (optional) simple data for text formatting
\& Note     : Used generally for debugging and for various print methods
.Ve
